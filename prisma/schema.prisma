generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id @default(uuid())
  role               UserRole     @default(USER)
  name               String
  email              String       @unique
  password           String
  isDeleted          Boolean      @default(false)
  needPasswordChange Boolean      @default(true)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  profile            UserProfile?
  foundItems         FoundItem[]
  claims             Claim[]
  LostItems          LostItems[]
}

enum UserRole {
  ADMIN
  USER
}

model UserProfile {
  id           String   @id @default(uuid())
  userId       String   @unique
  profilePhoto String?
  bio          String?
  age          Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Claim {
  id                     String      @id @default(uuid())
  userId                 String
  foundItemId            String      @unique
  status                 claimStatus @default(PENDING)
  distinguishingFeatures String?
  lostDate               String
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  foundItem              FoundItem   @relation(fields: [foundItemId], references: [id])
  user                   User        @relation(fields: [userId], references: [id])
}

enum claimStatus {
  PENDING
  APPROVED
  REJECTED
}

model FoundItem {
  id            String   @id @default(uuid())
  userId        String
  category      String
  foundItemName String
  photo         String?
  description   String
  location      String
  foundDate     String
  phoneNumber   Int?
  email         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  Claim         Claim?
}

model LostItems {
  id           String   @id @default(uuid())
  userId       String
  category     String
  lostItemName String
  photo        String?
  description  String
  location     String
  lostDate     String
  phoneNumber  Int?
  email        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

// delete
// model FoundItemCategory {
//   id         String      @id @default(uuid())
//   name       String      @unique
//   createdAt  DateTime    @default(now())
//   updatedAt  DateTime    @updatedAt
//   foundItems FoundItem[]
// }
